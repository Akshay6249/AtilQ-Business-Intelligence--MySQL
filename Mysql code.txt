Task 1 - Finance View

creted stored procedures 
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_customer_wise_sale_report`(
in_market VARCHAR(45),
    in_fiscal_year INT,
    in_customer_code INT)
BEGIN
SELECT
    MONTH(s.date) AS Month,
    p.product AS Product_Name, 
    p.variant AS Variant,      
    SUM(s.sold_quantity) AS Sold_Quantity,  -- Aggregating sold quantity by month and product/variant
    g.gross_price AS Gross_Price_Per_Item,  -- Gross price per item
    ROUND(SUM(s.sold_quantity) * g.gross_price, 2) AS Gross_Price_Total  -- Total gross price per product and month
FROM
    gross_sales s
JOIN
    dim_product p ON s.product_code = p.product_code
JOIN
    fact_gross_price g ON s.product_code = g.product_code AND s.fiscal_year = g.fiscal_year
WHERE
    s.fiscal_year = in_fiscal_year
    AND s.customer_code = in_customer_code
    AND s.market = in_market  -- Corrected string quotes for 'India'
GROUP BY
    MONTH(s.date), p.product, p.variant, g.gross_price  -- Group by product name, variant, and gross price
ORDER BY
    MONTH(s.date), p.product, p.variant;  -- Ordering by month, product, and variant

END

Task 2 - SCM View

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_forecast_accuracy`(
	in_fiscal_year INT
    )
BEGIN
WITH CTE1 AS
(	SELECT 
	s.customer_code,
	SUM(s.sold_quantity) AS total_sold_quantity,
    SUM(s.forecast_quantity) AS total_forecast_quantity,
    SUM((forecast_quantity - sold_quantity)) AS net_err,
    SUM((forecast_quantity - sold_quantity)) * 100 / SUM(forecast_quantity) AS net_error_pct, 
    SUM(ABS(forecast_quantity - sold_quantity)) AS abs_err,
    SUM(ABS(forecast_quantity - sold_quantity)) * 100 / SUM(forecast_quantity) AS abs_err_pct
FROM fact_act_est s
WHERE s.fiscal_year = in_fiscal_year
GROUP BY customer_code
)
SELECT 
	e.*,
    c.customer,
    c.market,
IF (abs_err_pct > 100, 0, 100-abs_err_pct) AS forecast_accuracy
FROM CTE1 e
join dim_customer c
using (customer_code)
order by forecast_accuracy desc;

END

Task 4 - Create TopNs
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_top_n_customers_by_net_sales`(
	in_market VARCHAR(45),
    in_fiscal_year INT,
    in_top_n INT)
BEGIN
  SELECT customer,
	round(sum(net_sales)/1000000,2) as net_sales_mln
    FROM net_sales s
    join dim_customer c
    on s.customer_code = c.customer_code
    where s.fiscal_year =in_fiscal_year and s.market=in_market
    group by customer
    order by net_sales_mln desc
    limit  in_top_n;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_top_n_market_by_net_sales`(
	in_fiscal_year INT,
    in_top_n INT)
BEGIN
SELECT market,
	round(sum(net_sales)/1000000,2) as net_sales_mln
    FROM net_sales
    where fiscal_year =in_fiscal_year
    group by market
    order by net_sales_mln desc
    limit  in_top_n;
END
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_top_n_products_by_net_sales`(
	in_fiscal_year int,
	in_top_n int)
BEGIN
select
		product,
      round(sum(net_sales)/1000000,2) as net_sales_mln
        from net_sales
       where fiscal_year=in_fiscal_year
    group by product
     order by net_sales_mln desc
    limit in_top_n;
	END

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_top_n_products_per_division_by_qty_sold`(
	in_fiscal_year INT,
    in_top_n INT)
BEGIN
WITH cte1 AS (
    SELECT 
        p.division,
        p.product,
        SUM(s.sold_quantity) AS total_qty_sold
    FROM fact_sales_monthly s
    JOIN dim_product p
        ON s.product_code = p.product_code
    WHERE s.fiscal_year = in_fiscal_year
    GROUP BY p.division, p.product
),
cte2 AS (
    SELECT *, 
           DENSE_RANK() OVER (PARTITION BY division ORDER BY total_qty_sold DESC) AS drnk
    FROM cte1
)
SELECT * 
FROM cte2
WHERE drnk <= in_top_n;
END

GROSS SALES VIEWS TABLE
CREATE 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `gross_sales` AS
    SELECT 
        `s`.`date` AS `date`,
        `s`.`fiscal_year` AS `fiscal_year`,
        `s`.`customer_code` AS `customer_code`,
        `c`.`customer` AS `customer`,
        `c`.`market` AS `market`,
        `s`.`product_code` AS `product_code`,
        `p`.`product` AS `product`,
        `p`.`variant` AS `variant`,
        `s`.`sold_quantity` AS `sold_quantity`,
        `g`.`gross_price` AS `gross_price_per_item`,
        ROUND((`s`.`sold_quantity` * `g`.`gross_price`),
                2) AS `gross_price_total`
    FROM
        (((`fact_sales_monthly` `s`
        JOIN `dim_product` `p` ON ((`s`.`product_code` = `p`.`product_code`)))
        JOIN `dim_customer` `c` ON ((`s`.`customer_code` = `c`.`customer_code`)))
        JOIN `fact_gross_price` `g` ON (((`g`.`fiscal_year` = `s`.`fiscal_year`)
            AND (`g`.`product_code` = `s`.`product_code`))))
NETS SALES VIEWS TABLE
CREATE 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `net_sales` AS
    SELECT 
        `sales_postinv_discount`.`date` AS `date`,
        `sales_postinv_discount`.`fiscal_year` AS `fiscal_year`,
        `sales_postinv_discount`.`customer_code` AS `customer_code`,
        `sales_postinv_discount`.`market` AS `market`,
        `sales_postinv_discount`.`product_code` AS `product_code`,
        `sales_postinv_discount`.`product` AS `product`,
        `sales_postinv_discount`.`variant` AS `variant`,
        `sales_postinv_discount`.`sold_quantity` AS `sold_quantity`,
        `sales_postinv_discount`.`gross_price_total` AS `gross_price_total`,
        `sales_postinv_discount`.`pre_invoice_discount_pct` AS `pre_invoice_discount_pct`,
        `sales_postinv_discount`.`net_invoice_sale` AS `net_invoice_sale`,
        `sales_postinv_discount`.`post_invoice_discount_pct` AS `post_invoice_discount_pct`,
        ((1 - `sales_postinv_discount`.`post_invoice_discount_pct`) * `sales_postinv_discount`.`net_invoice_sale`) AS `net_sales`
    FROM
        `sales_postinv_discount`
SALES POSTINV DISCOUNT VIEW
CREATE 
    ALGORITHM = UNDEFINED 
    DEFINER = `root`@`localhost` 
    SQL SECURITY DEFINER
VIEW `sales_postinv_discount` AS
    SELECT 
        `s`.`date` AS `date`,
        `s`.`fiscal_year` AS `fiscal_year`,
        `s`.`customer_code` AS `customer_code`,
        `s`.`market` AS `market`,
        `s`.`product_code` AS `product_code`,
        `s`.`product` AS `product`,
        `s`.`variant` AS `variant`,
        `s`.`sold_quantity` AS `sold_quantity`,
        `s`.`gross_price_total` AS `gross_price_total`,
        `s`.`pre_invoice_discount_pct` AS `pre_invoice_discount_pct`,
        (`s`.`gross_price_total` - (`s`.`pre_invoice_discount_pct` * `s`.`gross_price_total`)) AS `net_invoice_sale`,
        (`po`.`discounts_pct` + `po`.`other_deductions_pct`) AS `post_invoice_discount_pct`
    FROM
        (`sales_preinv_discount` `s`
        JOIN `fact_post_invoice_deductions` `po` ON (((`s`.`date` = `po`.`date`)
            AND (`s`.`product_code` = `po`.`product_code`)
            AND (`s`.`customer_code` = `po`.`customer_code`))))
SALES PREINV DISCOUNT VIEWS